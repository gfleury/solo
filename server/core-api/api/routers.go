/*
 * Swagger solo - OpenAPI 3.0
 *
 * solo API
 *
 * API version: 1.0.0
 * Contact: apiteam@solo.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package api

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/api/v1/",
		Index,
	},

	Route{
		"AddNetwork",
		strings.ToUpper("Post"),
		"/api/v1/account",
		AddNetwork,
	},

	Route{
		"DeleteNetwork",
		strings.ToUpper("Delete"),
		"/api/v1/account/{accountId}",
		DeleteNetwork,
	},

	Route{
		"GetNetworkById",
		strings.ToUpper("Get"),
		"/api/v1/account/{accountId}",
		GetNetworkById,
	},

	Route{
		"GetNetworks",
		strings.ToUpper("Get"),
		"/api/v1/accounts",
		GetNetworks,
	},

	Route{
		"UpdateNetwork",
		strings.ToUpper("Put"),
		"/api/v1/account",
		UpdateNetwork,
	},

	Route{
		"CreateUser",
		strings.ToUpper("Post"),
		"/api/v1/user",
		CreateUser,
	},

	Route{
		"DeleteUser",
		strings.ToUpper("Delete"),
		"/api/v1/user/{username}",
		DeleteUser,
	},

	Route{
		"LoginUser",
		strings.ToUpper("Get"),
		"/api/v1/user/login",
		LoginUser,
	},

	Route{
		"GetUserByName",
		strings.ToUpper("Get"),
		"/api/v1/user/{username}",
		GetUserByName,
	},

	Route{
		"LogoutUser",
		strings.ToUpper("Get"),
		"/api/v1/user/logout",
		LogoutUser,
	},

	Route{
		"UpdateUser",
		strings.ToUpper("Put"),
		"/api/v1/user/{username}",
		UpdateUser,
	},

	Route{
		"ImageProxy",
		strings.ToUpper("Get"),
		"/api/v1/image",
		ImageProxy,
	},
}
