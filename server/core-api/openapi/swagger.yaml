openapi: 3.0.3
info:
  title: Swagger solo - OpenAPI 3.0
  description: solo API
  termsOfService: http://solo.io/terms/
  contact:
    email: apiteam@solo.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://api.solo.io/api/v1
tags:
- name: accounts
  description: Everything about your accounts
- name: inbox
  description: Access your messages and communication
- name: publisher
  description: Publish on the accounts
paths:
  /accounts:
    get:
      tags:
      - accounts
      summary: Get all existing accounts
      description: Get all existing accounts for user
      operationId: getAccounts
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
                x-content-type: application/json
        "404":
          description: No accounts found
        "405":
          description: Validation exception
      security:
      - auth:
        - read:accounts
  /account:
    put:
      tags:
      - accounts
      summary: Update an existing account
      description: Update an existing account by Id
      operationId: updateAccount
      requestBody:
        description: Update an existent account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "405":
          description: Validation exception
      security:
      - auth:
        - write:accounts
        - read:accounts
    post:
      tags:
      - accounts
      summary: Add a new account
      description: Add a new account
      operationId: addAccount
      requestBody:
        description: Create a new account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "405":
          description: Invalid input
      security:
      - auth:
        - write:accounts
        - read:accounts
  /account/{accountId}:
    get:
      tags:
      - accounts
      summary: Find account by ID
      description: Returns a single account
      operationId: getAccountById
      parameters:
      - name: accountId
        in: path
        description: ID of account to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      security:
      - auth:
        - write:accounts
        - read:accounts
    delete:
      tags:
      - accounts
      summary: Deletes a account
      description: delete a account
      operationId: deleteAccount
      parameters:
      - name: accountId
        in: path
        description: Account id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid account value
      security:
      - auth:
        - write:accounts
        - read:accounts
  /account/{accountId}/session:
    get:
      tags:
      - accounts
      summary: Get accounts session
      description: Returns the session of an account
      operationId: getAccountSession
      parameters:
      - name: accountId
        in: path
        description: ID of account to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
      security:
      - auth:
        - write:accounts
        - read:accounts
    put:
      tags:
      - accounts
      summary: Creates a account session
      description: Create a account session
      operationId: createAccountSession
      parameters:
      - name: accountId
        in: path
        description: Account id to create the session
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid account value
      security:
      - auth:
        - write:accounts
        - read:accounts
    delete:
      tags:
      - accounts
      summary: Deletes a account session
      description: delete a account session
      operationId: deleteAccountSession
      parameters:
      - name: accountId
        in: path
        description: Account id to delete the session
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid account value
      security:
      - auth:
        - write:accounts
        - read:accounts
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /providers:
    get:
      tags:
      - provider
      summary: Get all existing providers
      description: Get all existing providers for user
      operationId: getProviders
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Provider'
                x-content-type: application/json
        "404":
          description: No providers found
        "405":
          description: Validation exception
      security:
      - auth:
        - read:providers
  /provider:
    post:
      tags:
      - provider
      summary: Create provider
      description: This can only be done by the logged in user.
      operationId: createProvider
      requestBody:
        description: Created provider object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provider'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
components:
  schemas:
    Provider:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Instagram
      example:
        name: Instagram
        id: 1
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        accounts:
          type: array
          description: Accounts that belong to user
          items:
            $ref: '#/components/schemas/Account'
        linkedUsers:
          type: array
          description: Users that are linked to this user
          items:
            $ref: '#/components/schemas/LinkedUser'
        verified:
          type: boolean
          description: User has confirmed email
      example:
        firstName: John
        lastName: James
        password: "12345"
        linkedUsers:
        - permissions: write
          user: null
        - permissions: write
          user: null
        userStatus: 1
        phone: "12345"
        verified: true
        id: 10
        accounts:
        - password: 123saveme
          provider:
            name: Instagram
            id: 1
          name: my_instagram
          id: 10
          login: user@mail.com
          tags:
          - name: name
            id: 0
          - name: name
            id: 0
          status: available
        - password: 123saveme
          provider:
            name: Instagram
            id: 1
          name: my_instagram
          id: 10
          login: user@mail.com
          tags:
          - name: name
            id: 0
          - name: name
            id: 0
          status: available
        email: john@email.com
        username: theUser
    LinkedUser:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        permissions:
          type: string
          description: account status
          enum:
          - write
          - read
          - owner
      example:
        permissions: write
        user: null
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      example:
        name: name
        id: 0
    Account:
      required:
      - login
      - name
      - password
      - provider
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: my_instagram
        login:
          type: string
          example: user@mail.com
        password:
          type: string
          format: password
          example: 123saveme
        provider:
          $ref: '#/components/schemas/Provider'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: account status
          enum:
          - available
          - pending
          - broken
      example:
        password: 123saveme
        provider:
          name: Instagram
          id: 1
        name: my_instagram
        id: 10
        login: user@mail.com
        tags:
        - name: name
          id: 0
        - name: name
          id: 0
        status: available
    Session:
      type: object
      properties:
        id:
          type: integer
          format: int64
        accountId:
          type: integer
          format: int64
        sessionData:
          type: string
          format: bytes
      example:
        accountId: 6
        sessionData: sessionData
        id: 0
  requestBodies:
    Account:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://api.solo.io/oauth/authorize
          scopes:
            write:accounts: modify accounts
            read:accounts: read your accounts
